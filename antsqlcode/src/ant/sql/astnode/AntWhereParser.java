package ant.sql.astnode;
/* AntWhereParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. AntWhereParser.java */
/** Stupid Programming Language parser. */
public class AntWhereParser
		/* @bgen(jjtree) */ implements AntWhereParserTreeConstants, AntWhereParserConstants {/* @bgen(jjtree) */
	protected JJTAntWhereParserState jjtree = new JJTAntWhereParserState();

	public Node rootNode() {
		return jjtree.rootNode();
	}

	final public void ExpressionWhere() throws ParseException {
		trace_call("ExpressionWhere");
		try {
			AndExpression();
			label_1: while (true) {
				if (jj_2_1(2)) {
					;
				} else {
					break label_1;
				}
				jj_consume_token(11);
				ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtn001.jjtSetFirstToken(getToken(1));
				try {
					AndExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
						jjtn001.jjtSetLastToken(getToken(0));
					}
				}
			}
			jj_consume_token(0);
		} finally {
			trace_return("ExpressionWhere");
		}
	}

	final public void PreExpressionWhere() throws ParseException {
		trace_call("PreExpressionWhere");
		try {
			if (jj_2_4(2)) {
				AndExpression();
				label_2: while (true) {
					if (jj_2_2(2)) {
						;
					} else {
						break label_2;
					}
					jj_consume_token(11);
					ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
					boolean jjtc001 = true;
					jjtree.openNodeScope(jjtn001);
					jjtn001.jjtSetFirstToken(getToken(1));
					try {
						AndExpression();
					} catch (Throwable jjte001) {
						if (jjtc001) {
							jjtree.clearNodeScope(jjtn001);
							jjtc001 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte001 instanceof RuntimeException) {
							{
								if (true)
									throw (RuntimeException) jjte001;
							}
						}
						if (jjte001 instanceof ParseException) {
							{
								if (true)
									throw (ParseException) jjte001;
							}
						}
						{
							if (true)
								throw (Error) jjte001;
						}
					} finally {
						if (jjtc001) {
							jjtree.closeNodeScope(jjtn001, 2);
							jjtn001.jjtSetLastToken(getToken(0));
						}
					}
				}
			} else if (jj_2_5(2)) {
				ORExpression();
				label_3: while (true) {
					if (jj_2_3(2)) {
						;
					} else {
						break label_3;
					}
					jj_consume_token(12);
					ASTAndNode jjtn002 = new ASTAndNode(JJTANDNODE);
					boolean jjtc002 = true;
					jjtree.openNodeScope(jjtn002);
					jjtn002.jjtSetFirstToken(getToken(1));
					try {
						ORExpression();
					} catch (Throwable jjte002) {
						if (jjtc002) {
							jjtree.clearNodeScope(jjtn002);
							jjtc002 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte002 instanceof RuntimeException) {
							{
								if (true)
									throw (RuntimeException) jjte002;
							}
						}
						if (jjte002 instanceof ParseException) {
							{
								if (true)
									throw (ParseException) jjte002;
							}
						}
						{
							if (true)
								throw (Error) jjte002;
						}
					} finally {
						if (jjtc002) {
							jjtree.closeNodeScope(jjtn002, 2);
							jjtn002.jjtSetLastToken(getToken(0));
						}
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} finally {
			trace_return("PreExpressionWhere");
		}
	}

	final public void AndExpression() throws ParseException {
		trace_call("AndExpression");
		try {
			ORExpression();
			label_4: while (true) {
				if (jj_2_6(2)) {
					;
				} else {
					break label_4;
				}
				jj_consume_token(12);
				ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtn001.jjtSetFirstToken(getToken(1));
				try {
					ORExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
						jjtn001.jjtSetLastToken(getToken(0));
					}
				}
			}
		} finally {
			trace_return("AndExpression");
		}
	}

	final public void ORExpression() throws ParseException {
		trace_call("ORExpression");
		try {
			if (jj_2_7(2)) {
				RelationalExpression();
			} else if (jj_2_8(2)) {
				jj_consume_token(13);
				PreExpressionWhere();
				ASTBlokNode jjtn001 = new ASTBlokNode(JJTBLOKNODE);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtn001.jjtSetFirstToken(getToken(1));
				try {
					jj_consume_token(14);
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 1);
						jjtn001.jjtSetLastToken(getToken(0));
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} finally {
			trace_return("ORExpression");
		}
	}

	final public void RelationalExpression() throws ParseException {
		trace_call("RelationalExpression");
		try {
			FiledExpression();
			if (jj_2_9(2)) {
				jj_consume_token(15);
				ASTLTNode jjtn001 = new ASTLTNode(JJTLTNODE);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				jjtn001.jjtSetFirstToken(getToken(1));
				try {
					valueExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
						jjtn001.jjtSetLastToken(getToken(0));
					}
				}
			} else if (jj_2_10(2)) {
				jj_consume_token(16);
				ASTGTNode jjtn002 = new ASTGTNode(JJTGTNODE);
				boolean jjtc002 = true;
				jjtree.openNodeScope(jjtn002);
				jjtn002.jjtSetFirstToken(getToken(1));
				try {
					valueExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte002;
						}
					}
					if (jjte002 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte002;
						}
					}
					{
						if (true)
							throw (Error) jjte002;
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
						jjtn002.jjtSetLastToken(getToken(0));
					}
				}
			} else if (jj_2_11(2)) {
				jj_consume_token(17);
				ASTLENode jjtn003 = new ASTLENode(JJTLENODE);
				boolean jjtc003 = true;
				jjtree.openNodeScope(jjtn003);
				jjtn003.jjtSetFirstToken(getToken(1));
				try {
					valueExpression();
				} catch (Throwable jjte003) {
					if (jjtc003) {
						jjtree.clearNodeScope(jjtn003);
						jjtc003 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte003 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte003;
						}
					}
					if (jjte003 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte003;
						}
					}
					{
						if (true)
							throw (Error) jjte003;
					}
				} finally {
					if (jjtc003) {
						jjtree.closeNodeScope(jjtn003, 2);
						jjtn003.jjtSetLastToken(getToken(0));
					}
				}
			} else if (jj_2_12(2)) {
				jj_consume_token(18);
				ASTGENode jjtn004 = new ASTGENode(JJTGENODE);
				boolean jjtc004 = true;
				jjtree.openNodeScope(jjtn004);
				jjtn004.jjtSetFirstToken(getToken(1));
				try {
					valueExpression();
				} catch (Throwable jjte004) {
					if (jjtc004) {
						jjtree.clearNodeScope(jjtn004);
						jjtc004 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte004 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte004;
						}
					}
					if (jjte004 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte004;
						}
					}
					{
						if (true)
							throw (Error) jjte004;
					}
				} finally {
					if (jjtc004) {
						jjtree.closeNodeScope(jjtn004, 2);
						jjtn004.jjtSetLastToken(getToken(0));
					}
				}
			} else if (jj_2_13(2)) {
				jj_consume_token(19);
				ASTEQNode jjtn005 = new ASTEQNode(JJTEQNODE);
				boolean jjtc005 = true;
				jjtree.openNodeScope(jjtn005);
				jjtn005.jjtSetFirstToken(getToken(1));
				try {
					valueExpression();
				} catch (Throwable jjte005) {
					if (jjtc005) {
						jjtree.clearNodeScope(jjtn005);
						jjtc005 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte005 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte005;
						}
					}
					if (jjte005 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte005;
						}
					}
					{
						if (true)
							throw (Error) jjte005;
					}
				} finally {
					if (jjtc005) {
						jjtree.closeNodeScope(jjtn005, 2);
						jjtn005.jjtSetLastToken(getToken(0));
					}
				}
			} else if (jj_2_14(2)) {
				jj_consume_token(20);
				ASTNEQNode jjtn006 = new ASTNEQNode(JJTNEQNODE);
				boolean jjtc006 = true;
				jjtree.openNodeScope(jjtn006);
				jjtn006.jjtSetFirstToken(getToken(1));
				try {
					valueExpression();
				} catch (Throwable jjte006) {
					if (jjtc006) {
						jjtree.clearNodeScope(jjtn006);
						jjtc006 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte006 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte006;
						}
					}
					if (jjte006 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte006;
						}
					}
					{
						if (true)
							throw (Error) jjte006;
					}
				} finally {
					if (jjtc006) {
						jjtree.closeNodeScope(jjtn006, 2);
						jjtn006.jjtSetLastToken(getToken(0));
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} finally {
			trace_return("RelationalExpression");
		}
	}

	final public void FiledExpression() throws ParseException {
		trace_call("FiledExpression");
		try {/* @bgen(jjtree) FiledExpression */
			ASTFiledExpression jjtn000 = new ASTFiledExpression(JJTFILEDEXPRESSION);
			boolean jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtn000.jjtSetFirstToken(getToken(1));
			Token t;
			try {
				t = jj_consume_token(IDENTFIELD);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.jjtSetLastToken(getToken(0));
				jjtn000.name = t.image;
			} finally {
				if (jjtc000) {
					jjtree.closeNodeScope(jjtn000, true);
					jjtn000.jjtSetLastToken(getToken(0));
				}
			}
		} finally {
			trace_return("FiledExpression");
		}
	}

	final public void valueExpression() throws ParseException {
		trace_call("valueExpression");
		try {/* @bgen(jjtree) valueExpression */
			ASTvalueExpression jjtn000 = new ASTvalueExpression(JJTVALUEEXPRESSION);
			boolean jjtc000 = true;
			jjtree.openNodeScope(jjtn000);
			jjtn000.jjtSetFirstToken(getToken(1));
			Token t;
			try {
				if (jj_2_15(2)) {
					t = jj_consume_token(INTEGER_LITERAL);
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtn000.jjtSetLastToken(getToken(0));
					jjtn000.value = Integer.parseInt(t.image);
				} else if (jj_2_16(2)) {
					t = jj_consume_token(IDENTIFIER);
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtn000.jjtSetLastToken(getToken(0));
					jjtn000.value = t.image;
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
			} finally {
				if (jjtc000) {
					jjtree.closeNodeScope(jjtn000, true);
					jjtn000.jjtSetLastToken(getToken(0));
				}
			}
		} finally {
			trace_return("valueExpression");
		}
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(10, xla);
		}
	}

	private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_12();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(11, xla);
		}
	}

	private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_13();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(12, xla);
		}
	}

	private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_14();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(13, xla);
		}
	}

	private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_15();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(14, xla);
		}
	}

	private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_16();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(15, xla);
		}
	}

	private boolean jj_3_8() {
		if (jj_scan_token(13))
			return true;
		if (jj_3R_8())
			return true;
		return false;
	}

	private boolean jj_3_3() {
		if (jj_scan_token(12))
			return true;
		if (jj_3R_6())
			return true;
		return false;
	}

	private boolean jj_3_2() {
		if (jj_scan_token(11))
			return true;
		if (jj_3R_5())
			return true;
		return false;
	}

	private boolean jj_3R_6() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_7()) {
			jj_scanpos = xsp;
			if (jj_3_8())
				return true;
		}
		return false;
	}

	private boolean jj_3_7() {
		if (jj_3R_7())
			return true;
		return false;
	}

	private boolean jj_3_15() {
		if (jj_scan_token(INTEGER_LITERAL))
			return true;
		return false;
	}

	private boolean jj_3R_9() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_15()) {
			jj_scanpos = xsp;
			if (jj_3_16())
				return true;
		}
		return false;
	}

	private boolean jj_3R_5() {
		if (jj_3R_6())
			return true;
		return false;
	}

	private boolean jj_3_1() {
		if (jj_scan_token(11))
			return true;
		if (jj_3R_5())
			return true;
		return false;
	}

	private boolean jj_3_5() {
		if (jj_3R_6())
			return true;
		return false;
	}

	private boolean jj_3R_10() {
		if (jj_scan_token(IDENTFIELD))
			return true;
		return false;
	}

	private boolean jj_3R_8() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_4()) {
			jj_scanpos = xsp;
			if (jj_3_5())
				return true;
		}
		return false;
	}

	private boolean jj_3_4() {
		if (jj_3R_5())
			return true;
		return false;
	}

	private boolean jj_3_14() {
		if (jj_scan_token(20))
			return true;
		if (jj_3R_9())
			return true;
		return false;
	}

	private boolean jj_3_13() {
		if (jj_scan_token(19))
			return true;
		if (jj_3R_9())
			return true;
		return false;
	}

	private boolean jj_3_12() {
		if (jj_scan_token(18))
			return true;
		if (jj_3R_9())
			return true;
		return false;
	}

	private boolean jj_3_11() {
		if (jj_scan_token(17))
			return true;
		if (jj_3R_9())
			return true;
		return false;
	}

	private boolean jj_3_10() {
		if (jj_scan_token(16))
			return true;
		if (jj_3R_9())
			return true;
		return false;
	}

	private boolean jj_3_9() {
		if (jj_scan_token(15))
			return true;
		if (jj_3R_9())
			return true;
		return false;
	}

	private boolean jj_3_6() {
		if (jj_scan_token(12))
			return true;
		if (jj_3R_6())
			return true;
		return false;
	}

	private boolean jj_3R_7() {
		if (jj_3R_10())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_9()) {
			jj_scanpos = xsp;
			if (jj_3_10()) {
				jj_scanpos = xsp;
				if (jj_3_11()) {
					jj_scanpos = xsp;
					if (jj_3_12()) {
						jj_scanpos = xsp;
						if (jj_3_13()) {
							jj_scanpos = xsp;
							if (jj_3_14())
								return true;
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_16() {
		if (jj_scan_token(IDENTIFIER))
			return true;
		return false;
	}

	/** Generated Token Manager. */
	public AntWhereParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[0];
	static private int[] jj_la1_0;
	static {
		jj_la1_init_0();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] {};
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[16];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public AntWhereParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public AntWhereParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new AntWhereParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public AntWhereParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new AntWhereParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public AntWhereParser(AntWhereParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(AntWhereParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			trace_token(token, "");
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	@SuppressWarnings("serial")
	static private final class LookaheadSuccess extends java.lang.Error {
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		trace_token(token, " (in getNextToken)");
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk_f() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[21];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 0; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 21; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	private int trace_indent = 0;
	private boolean trace_enabled = true;

	/** Enable tracing. */
	final public void enable_tracing() {
		trace_enabled = true;
	}

	/** Disable tracing. */
	final public void disable_tracing() {
		trace_enabled = false;
	}

	private void trace_call(String s) {
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.println("Call:   " + s);
		}
		trace_indent = trace_indent + 2;
	}

	private void trace_return(String s) {
		trace_indent = trace_indent - 2;
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.println("Return: " + s);
		}
	}

	private void trace_token(Token t, String where) {
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.print("Consumed token: <" + tokenImage[t.kind]);
			if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
				System.out.print(": \"" + t.image + "\"");
			}
			System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
		}
	}

	private void trace_scan(Token t1, int t2) {
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.print("Visited token: <" + tokenImage[t1.kind]);
			if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
				System.out.print(": \"" + t1.image + "\"");
			}
			System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <"
					+ tokenImage[t2] + ">");
		}
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 16; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						case 5:
							jj_3_6();
							break;
						case 6:
							jj_3_7();
							break;
						case 7:
							jj_3_8();
							break;
						case 8:
							jj_3_9();
							break;
						case 9:
							jj_3_10();
							break;
						case 10:
							jj_3_11();
							break;
						case 11:
							jj_3_12();
							break;
						case 12:
							jj_3_13();
							break;
						case 13:
							jj_3_14();
							break;
						case 14:
							jj_3_15();
							break;
						case 15:
							jj_3_16();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
